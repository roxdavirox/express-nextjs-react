{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime-corejs2/regenerator\");\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nvar React = require(\"react\");\n\nvar __jsx = React.createElement;\n\nvar fetch = require(\"isomorphic-fetch\");\n\nvar Form = function Form(_ref) {\n  var product = _ref.product,\n      options = _ref.options;\n  return __jsx(React.Fragment, null, __jsx(\"div\", null, \"Produto: \", product.name, \" \"), __jsx(\"ul\", null, _Object$keys(options).map(function (k) {\n    return __jsx(\"ul\", null, options[k].name, options[k].items.map(function (item) {\n      return __jsx(\"li\", {\n        key: item._id\n      }, item.name);\n    }));\n  })));\n};\n\nForm.getInitialProps = function _callee(_ref2) {\n  var req, res, query, response, data, product, groupedOptions;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          req = _ref2.req, res = _ref2.res, query = _ref2.query;\n          _context.prev = 1;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetch(\"https://mktp.herokuapp.com/form/\".concat(query.id)));\n\n        case 4:\n          response = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 7:\n          data = _context.sent;\n          console.log('data', data);\n          product = data.product, groupedOptions = data.groupedOptions;\n          return _context.abrupt(\"return\", {\n            product: product,\n            options: groupedOptions\n          });\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](1);\n          console.log('error ====> : ', _context.t0);\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 13]]);\n};\n\nmodule.exports = Form;","map":{"version":3,"sources":["C:/www/express-nextjs-react/src/pages/form.js"],"names":["React","require","fetch","Form","product","options","name","map","k","items","item","_id","getInitialProps","req","res","query","id","response","json","data","console","log","groupedOptions","module","exports"],"mappings":";;;;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,kBAAD,CAArB;;AAEA,IAAME,IAAI,GAAG,SAAPA,IAAO,OAA0B;AAAA,MAAvBC,OAAuB,QAAvBA,OAAuB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAErC,SACE,4BACE,gCAAeD,OAAO,CAACE,IAAvB,MADF,EAEE,kBACG,aAAYD,OAAZ,EAAqBE,GAArB,CAAyB,UAAAC,CAAC;AAAA,WACzB,kBAAKH,OAAO,CAACG,CAAD,CAAP,CAAWF,IAAhB,EACGD,OAAO,CAACG,CAAD,CAAP,CAAWC,KAAX,CAAiBF,GAAjB,CAAqB,UAAAG,IAAI;AAAA,aAAI;AAAI,QAAA,GAAG,EAAEA,IAAI,CAACC;AAAd,SAAoBD,IAAI,CAACJ,IAAzB,CAAJ;AAAA,KAAzB,CADH,CADyB;AAAA,GAA1B,CADH,CAFF,CADF;AAYD,CAdD;;AAgBAH,IAAI,CAACS,eAAL,GAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,GAAT,SAASA,GAAT,EAAcC,GAAd,SAAcA,GAAd,EAAmBC,KAAnB,SAAmBA,KAAnB;AAAA;AAAA;AAAA,2CAEIb,KAAK,2CACSa,KAAK,CAACC,EADf,EAFT;;AAAA;AAEbC,UAAAA,QAFa;AAAA;AAAA,2CAKAA,QAAQ,CAACC,IAAT,EALA;;AAAA;AAKbC,UAAAA,IALa;AAMnBC,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAApB;AACQf,UAAAA,OAPW,GAOiBe,IAPjB,CAOXf,OAPW,EAOFkB,cAPE,GAOiBH,IAPjB,CAOFG,cAPE;AAAA,2CAQZ;AAAElB,YAAAA,OAAO,EAAPA,OAAF;AAAWC,YAAAA,OAAO,EAAEiB;AAApB,WARY;;AAAA;AAAA;AAAA;AAUnBF,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AAVmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAcAE,MAAM,CAACC,OAAP,GAAiBrB,IAAjB","sourcesContent":["const React = require(\"react\");\r\nconst fetch = require(\"isomorphic-fetch\");\r\n\r\nconst Form = ({ product, options }) => {\r\n\r\n  return (\r\n    <>\r\n      <div>Produto: {product.name} </div>\r\n      <ul>\r\n        {Object.keys(options).map(k => \r\n          <ul>{options[k].name}\r\n            {options[k].items.map(item => <li key={item._id}>{item.name}</li>)}\r\n          </ul>\r\n        )}\r\n      </ul>\r\n    </>\r\n  )\r\n}\r\n\r\nForm.getInitialProps = async ({ req, res, query }) => {\r\n  try {\r\n    const response = await fetch(\r\n      `https://mktp.herokuapp.com/form/${query.id}`\r\n    );\r\n    const data = await response.json();\r\n    console.log('data', data);\r\n    const { product, groupedOptions } = data;\r\n    return { product, options: groupedOptions };\r\n  } catch (e) {\r\n    console.log('error ====> : ', e);\r\n  }\r\n};\r\n\r\nmodule.exports = Form;\r\n"]},"metadata":{},"sourceType":"script"}